//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18051.
// 
#pragma warning disable 1591

namespace clickclickboom.machinaX.blogX.cmsX.LinkLogWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LinkLogServiceXSoap", Namespace="http://www.clickclickBOOM.com/MachinaX/ServiceX")]
    public partial class LinkLogServiceX : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetLinkLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListLinkLogsAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListLinkLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchLinkLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLinkLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveLinkLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLinkLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestCustomOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestErrorOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestExceptionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LinkLogServiceX() {
            this.Url = global::clickclickboom.machinaX.blogX.cmsX.Properties.Settings.Default.CmsX_2_6_0_LinkLogWS_LinkLogServiceX;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetLinkLogCompletedEventHandler GetLinkLogCompleted;
        
        /// <remarks/>
        public event ListLinkLogsAllCompletedEventHandler ListLinkLogsAllCompleted;
        
        /// <remarks/>
        public event ListLinkLogsCompletedEventHandler ListLinkLogsCompleted;
        
        /// <remarks/>
        public event SearchLinkLogsCompletedEventHandler SearchLinkLogsCompleted;
        
        /// <remarks/>
        public event AddLinkLogCompletedEventHandler AddLinkLogCompleted;
        
        /// <remarks/>
        public event RemoveLinkLogCompletedEventHandler RemoveLinkLogCompleted;
        
        /// <remarks/>
        public event UpdateLinkLogCompletedEventHandler UpdateLinkLogCompleted;
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        public event TestNameCompletedEventHandler TestNameCompleted;
        
        /// <remarks/>
        public event TestCustomCompletedEventHandler TestCustomCompleted;
        
        /// <remarks/>
        public event TestErrorCompletedEventHandler TestErrorCompleted;
        
        /// <remarks/>
        public event TestExceptionCompletedEventHandler TestExceptionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/GetLinkLog", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetLinkLog(int LinkLogID) {
            object[] results = this.Invoke("GetLinkLog", new object[] {
                        LinkLogID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkLogAsync(int LinkLogID) {
            this.GetLinkLogAsync(LinkLogID, null);
        }
        
        /// <remarks/>
        public void GetLinkLogAsync(int LinkLogID, object userState) {
            if ((this.GetLinkLogOperationCompleted == null)) {
                this.GetLinkLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkLogOperationCompleted);
            }
            this.InvokeAsync("GetLinkLog", new object[] {
                        LinkLogID}, this.GetLinkLogOperationCompleted, userState);
        }
        
        private void OnGetLinkLogOperationCompleted(object arg) {
            if ((this.GetLinkLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkLogCompleted(this, new GetLinkLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/ListLinkLogsAll", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListLinkLogsAll(bool Is_CSV, int PersonID, string SortCol, bool SortDesc) {
            object[] results = this.Invoke("ListLinkLogsAll", new object[] {
                        Is_CSV,
                        PersonID,
                        SortCol,
                        SortDesc});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListLinkLogsAllAsync(bool Is_CSV, int PersonID, string SortCol, bool SortDesc) {
            this.ListLinkLogsAllAsync(Is_CSV, PersonID, SortCol, SortDesc, null);
        }
        
        /// <remarks/>
        public void ListLinkLogsAllAsync(bool Is_CSV, int PersonID, string SortCol, bool SortDesc, object userState) {
            if ((this.ListLinkLogsAllOperationCompleted == null)) {
                this.ListLinkLogsAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListLinkLogsAllOperationCompleted);
            }
            this.InvokeAsync("ListLinkLogsAll", new object[] {
                        Is_CSV,
                        PersonID,
                        SortCol,
                        SortDesc}, this.ListLinkLogsAllOperationCompleted, userState);
        }
        
        private void OnListLinkLogsAllOperationCompleted(object arg) {
            if ((this.ListLinkLogsAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListLinkLogsAllCompleted(this, new ListLinkLogsAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/ListLinkLogs", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ListLinkLogs(bool Is_CSV, int PersonID, int StartPage, string SortCol, bool SortDesc, int Rows) {
            object[] results = this.Invoke("ListLinkLogs", new object[] {
                        Is_CSV,
                        PersonID,
                        StartPage,
                        SortCol,
                        SortDesc,
                        Rows});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ListLinkLogsAsync(bool Is_CSV, int PersonID, int StartPage, string SortCol, bool SortDesc, int Rows) {
            this.ListLinkLogsAsync(Is_CSV, PersonID, StartPage, SortCol, SortDesc, Rows, null);
        }
        
        /// <remarks/>
        public void ListLinkLogsAsync(bool Is_CSV, int PersonID, int StartPage, string SortCol, bool SortDesc, int Rows, object userState) {
            if ((this.ListLinkLogsOperationCompleted == null)) {
                this.ListLinkLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListLinkLogsOperationCompleted);
            }
            this.InvokeAsync("ListLinkLogs", new object[] {
                        Is_CSV,
                        PersonID,
                        StartPage,
                        SortCol,
                        SortDesc,
                        Rows}, this.ListLinkLogsOperationCompleted, userState);
        }
        
        private void OnListLinkLogsOperationCompleted(object arg) {
            if ((this.ListLinkLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListLinkLogsCompleted(this, new ListLinkLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/SearchLinkLogs", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SearchLinkLogs(bool Is_CSV, int PersonIDSrchType, string PersonID, int NameSrchType, string Name, int LinkSrchType, string Link, int DateStartSrchType, string DateStart, int DateEndSrchType, string DateEnd, int StartPage, string SortCol, bool SortDesc, int Rows) {
            object[] results = this.Invoke("SearchLinkLogs", new object[] {
                        Is_CSV,
                        PersonIDSrchType,
                        PersonID,
                        NameSrchType,
                        Name,
                        LinkSrchType,
                        Link,
                        DateStartSrchType,
                        DateStart,
                        DateEndSrchType,
                        DateEnd,
                        StartPage,
                        SortCol,
                        SortDesc,
                        Rows});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SearchLinkLogsAsync(bool Is_CSV, int PersonIDSrchType, string PersonID, int NameSrchType, string Name, int LinkSrchType, string Link, int DateStartSrchType, string DateStart, int DateEndSrchType, string DateEnd, int StartPage, string SortCol, bool SortDesc, int Rows) {
            this.SearchLinkLogsAsync(Is_CSV, PersonIDSrchType, PersonID, NameSrchType, Name, LinkSrchType, Link, DateStartSrchType, DateStart, DateEndSrchType, DateEnd, StartPage, SortCol, SortDesc, Rows, null);
        }
        
        /// <remarks/>
        public void SearchLinkLogsAsync(
                    bool Is_CSV, 
                    int PersonIDSrchType, 
                    string PersonID, 
                    int NameSrchType, 
                    string Name, 
                    int LinkSrchType, 
                    string Link, 
                    int DateStartSrchType, 
                    string DateStart, 
                    int DateEndSrchType, 
                    string DateEnd, 
                    int StartPage, 
                    string SortCol, 
                    bool SortDesc, 
                    int Rows, 
                    object userState) {
            if ((this.SearchLinkLogsOperationCompleted == null)) {
                this.SearchLinkLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchLinkLogsOperationCompleted);
            }
            this.InvokeAsync("SearchLinkLogs", new object[] {
                        Is_CSV,
                        PersonIDSrchType,
                        PersonID,
                        NameSrchType,
                        Name,
                        LinkSrchType,
                        Link,
                        DateStartSrchType,
                        DateStart,
                        DateEndSrchType,
                        DateEnd,
                        StartPage,
                        SortCol,
                        SortDesc,
                        Rows}, this.SearchLinkLogsOperationCompleted, userState);
        }
        
        private void OnSearchLinkLogsOperationCompleted(object arg) {
            if ((this.SearchLinkLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchLinkLogsCompleted(this, new SearchLinkLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/AddLinkLog", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AddLinkLog(string Link, string Token, int PersonID) {
            object[] results = this.Invoke("AddLinkLog", new object[] {
                        Link,
                        Token,
                        PersonID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AddLinkLogAsync(string Link, string Token, int PersonID) {
            this.AddLinkLogAsync(Link, Token, PersonID, null);
        }
        
        /// <remarks/>
        public void AddLinkLogAsync(string Link, string Token, int PersonID, object userState) {
            if ((this.AddLinkLogOperationCompleted == null)) {
                this.AddLinkLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLinkLogOperationCompleted);
            }
            this.InvokeAsync("AddLinkLog", new object[] {
                        Link,
                        Token,
                        PersonID}, this.AddLinkLogOperationCompleted, userState);
        }
        
        private void OnAddLinkLogOperationCompleted(object arg) {
            if ((this.AddLinkLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLinkLogCompleted(this, new AddLinkLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/RemoveLinkLog", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode RemoveLinkLog(int LinkLogID) {
            object[] results = this.Invoke("RemoveLinkLog", new object[] {
                        LinkLogID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveLinkLogAsync(int LinkLogID) {
            this.RemoveLinkLogAsync(LinkLogID, null);
        }
        
        /// <remarks/>
        public void RemoveLinkLogAsync(int LinkLogID, object userState) {
            if ((this.RemoveLinkLogOperationCompleted == null)) {
                this.RemoveLinkLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveLinkLogOperationCompleted);
            }
            this.InvokeAsync("RemoveLinkLog", new object[] {
                        LinkLogID}, this.RemoveLinkLogOperationCompleted, userState);
        }
        
        private void OnRemoveLinkLogOperationCompleted(object arg) {
            if ((this.RemoveLinkLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveLinkLogCompleted(this, new RemoveLinkLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/UpdateLinkLog", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UpdateLinkLog(int LinkLogID, string Link, string Token, int PersonID) {
            object[] results = this.Invoke("UpdateLinkLog", new object[] {
                        LinkLogID,
                        Link,
                        Token,
                        PersonID});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLinkLogAsync(int LinkLogID, string Link, string Token, int PersonID) {
            this.UpdateLinkLogAsync(LinkLogID, Link, Token, PersonID, null);
        }
        
        /// <remarks/>
        public void UpdateLinkLogAsync(int LinkLogID, string Link, string Token, int PersonID, object userState) {
            if ((this.UpdateLinkLogOperationCompleted == null)) {
                this.UpdateLinkLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLinkLogOperationCompleted);
            }
            this.InvokeAsync("UpdateLinkLog", new object[] {
                        LinkLogID,
                        Link,
                        Token,
                        PersonID}, this.UpdateLinkLogOperationCompleted, userState);
        }
        
        private void OnUpdateLinkLogOperationCompleted(object arg) {
            if ((this.UpdateLinkLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLinkLogCompleted(this, new UpdateLinkLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/Test", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode Test() {
            object[] results = this.Invoke("Test", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TestAsync() {
            this.TestAsync(null);
        }
        
        /// <remarks/>
        public void TestAsync(object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[0], this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/TestName", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestName() {
            object[] results = this.Invoke("TestName", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestNameAsync() {
            this.TestNameAsync(null);
        }
        
        /// <remarks/>
        public void TestNameAsync(object userState) {
            if ((this.TestNameOperationCompleted == null)) {
                this.TestNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestNameOperationCompleted);
            }
            this.InvokeAsync("TestName", new object[0], this.TestNameOperationCompleted, userState);
        }
        
        private void OnTestNameOperationCompleted(object arg) {
            if ((this.TestNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestNameCompleted(this, new TestNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/TestCustom", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TestCustom(string Format, string RootName, string ResultName, string CodeName, string DescriptionName) {
            object[] results = this.Invoke("TestCustom", new object[] {
                        Format,
                        RootName,
                        ResultName,
                        CodeName,
                        DescriptionName});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TestCustomAsync(string Format, string RootName, string ResultName, string CodeName, string DescriptionName) {
            this.TestCustomAsync(Format, RootName, ResultName, CodeName, DescriptionName, null);
        }
        
        /// <remarks/>
        public void TestCustomAsync(string Format, string RootName, string ResultName, string CodeName, string DescriptionName, object userState) {
            if ((this.TestCustomOperationCompleted == null)) {
                this.TestCustomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestCustomOperationCompleted);
            }
            this.InvokeAsync("TestCustom", new object[] {
                        Format,
                        RootName,
                        ResultName,
                        CodeName,
                        DescriptionName}, this.TestCustomOperationCompleted, userState);
        }
        
        private void OnTestCustomOperationCompleted(object arg) {
            if ((this.TestCustomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCustomCompleted(this, new TestCustomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/TestError", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TestError() {
            object[] results = this.Invoke("TestError", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TestErrorAsync() {
            this.TestErrorAsync(null);
        }
        
        /// <remarks/>
        public void TestErrorAsync(object userState) {
            if ((this.TestErrorOperationCompleted == null)) {
                this.TestErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestErrorOperationCompleted);
            }
            this.InvokeAsync("TestError", new object[0], this.TestErrorOperationCompleted, userState);
        }
        
        private void OnTestErrorOperationCompleted(object arg) {
            if ((this.TestErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestErrorCompleted(this, new TestErrorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.clickclickBOOM.com/MachinaX/ServiceX/TestException", RequestNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", ResponseNamespace="http://www.clickclickBOOM.com/MachinaX/ServiceX", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TestException() {
            object[] results = this.Invoke("TestException", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void TestExceptionAsync() {
            this.TestExceptionAsync(null);
        }
        
        /// <remarks/>
        public void TestExceptionAsync(object userState) {
            if ((this.TestExceptionOperationCompleted == null)) {
                this.TestExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestExceptionOperationCompleted);
            }
            this.InvokeAsync("TestException", new object[0], this.TestExceptionOperationCompleted, userState);
        }
        
        private void OnTestExceptionOperationCompleted(object arg) {
            if ((this.TestExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestExceptionCompleted(this, new TestExceptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLinkLogCompletedEventHandler(object sender, GetLinkLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ListLinkLogsAllCompletedEventHandler(object sender, ListLinkLogsAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListLinkLogsAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListLinkLogsAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ListLinkLogsCompletedEventHandler(object sender, ListLinkLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListLinkLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListLinkLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SearchLinkLogsCompletedEventHandler(object sender, SearchLinkLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchLinkLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchLinkLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddLinkLogCompletedEventHandler(object sender, AddLinkLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLinkLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLinkLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RemoveLinkLogCompletedEventHandler(object sender, RemoveLinkLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveLinkLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveLinkLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateLinkLogCompletedEventHandler(object sender, UpdateLinkLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLinkLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLinkLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestNameCompletedEventHandler(object sender, TestNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestCustomCompletedEventHandler(object sender, TestCustomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCustomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCustomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestErrorCompletedEventHandler(object sender, TestErrorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestErrorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestErrorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestExceptionCompletedEventHandler(object sender, TestExceptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestExceptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestExceptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591